% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utlis.R
\name{fit_tmb}
\alias{fit_tmb}
\title{Fit a Jolly–Seber (JS) model via TMB}
\usage{
fit_tmb(
  df,
  formulas,
  state_var = NULL,
  period_var,
  map = NULL,
  control = list()
)
}
\arguments{
\item{df}{A data frame of summarized capture–recapture observations.}

\item{formulas}{A named list of model formulas (one per process: e.g. \code{phi}, \code{p}, \code{w}, etc.).}

\item{state_var}{Character, name of the state variable (or \code{NULL} if none).}

\item{period_var}{Character, name of the period variable.}

\item{map}{Optional named list for fixing or removing parameters (passed to \code{MakeADFun}).}

\item{control}{Optional list of control parameters to pass to \code{MakeADFun}.}
}
\value{
A list with elements:
\describe{
  \item{\code{design}}{The output of \code{make_design_list_2()}.}
  \item{\code{lookup}}{The per‐process lookup tables from \code{make_process_lookup()}.}
  \item{\code{params}}{Flattened initial parameter vectors.}
  \item{\code{random}}{Names of random‐effect parameters.}
  \item{\code{obj}}{The TMB AD‐fun object.}
  \item{\code{opt}}{Result of \code{nlminb()} optimization.}
  \item{\code{report}}{Raw report from \code{obj\$report()}.}
  \item{\code{sdreport}}{The TMB \code{sdreport} object.}
}
}
\description{
This is a high‐level wrapper that takes your raw capture–recapture data,
a list of per‐process formulas, the names of your state and period variables,
and then:
  1. Builds the \code{design} object (via \code{make_design_list_2})
  2. Constructs lookup tables (\code{make_process_lookup})
  3. Builds and flattens parameter vectors (\code{make_param_vectors}, \code{make_random})
  4. Assembles the data list for TMB (via \code{make_RTMB_data_list})
  5. Instantiates and optimizes an AD‐fun via \code{RTMB::MakeADFun}
}
\examples{
\dontrun{
library(dplyr)
d <- read.csv("your_data.csv") \%>\%
  mutate(
    f_tk  = factor(Period),
    f_tl  = factor(TagState),
    t_k   = as.integer(f_tk),
    r_k   = as.integer(RecapPeriod),
    tag   = !is.na(TagID),
    n     = 1L
  ) \%>\%
  group_by(f_tk, f_tl, t_k, r_k, tag) \%>\%
  summarise(n = sum(n), .groups = "drop")

formulas <- list(
  phi    = ~ -1 + f_tl,
  p      = ~  1,
  w      = ~  1 + (1|f_tk),
  t_var  = ~  1,
  Nsuper = ~ -1 + f_tl
)

res <- fit_CJS_tmb(
  df         = d,
  formulas   = formulas,
  state_var  = "f_tl",
  period_var = "f_tk"
)

# inspect results
summary(res$opt)
head(res$report$psiPtot_g)
}

}
