% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/utlis.R
\name{sanity_check_process}
\alias{sanity_check_process}
\title{Sanity Check for Process Lookup and Parameter Mapping}
\usage{
sanity_check_process(
  proc,
  design,
  lookup,
  params,
  state_var = NULL,
  period_var = "f_tk"
)
}
\arguments{
\item{proc}{Character. Process name (e.g., "phi").}

\item{design}{The design list from `make_design_list_2()`.}

\item{lookup}{The output from `make_process_lookup()`.}

\item{params}{A list of parameter vectors from `make_param_vectors()`.}

\item{state_var}{Character. Name of the state variable.}

\item{period_var}{Character. Name of the period variable (default = "f_tk").}
}
\value{
A list containing:
- `dim_S`: Dimensions of the process matrix (G x S x S x T)
- `design_rows`: Table of how many times each row in the minimal design matrix is used
- `valid`: Logical flag indicating if all rows referenced are within the bounds of `params`
- `table`: A summary table of usage counts by design row
}
\description{
Validates that the lookup table for a process (e.g., `phi` or `p`) is consistent
with the expected dimensions of the S2 or D2 arrays and that all index combinations
are assigned appropriate parameter rows from the minimal design matrix.

This function is useful for validating your design matrix and parameter map setup
before embedding the logic in RTMB.
}
\examples{
set.seed(123)
df <- data.frame(
  f_tk   = rep(1:5, each = 12),
  f_tl   = factor(rep(c("A", "B", "C"), times = 20)),
  f_yr   = factor(sample(rep(2010:2012, length.out = 60))),
  f_site = factor(sample(rep(1:3, length.out = 60)))
)

formulas <- list(
  phi = ~ f_yr + (1|f_site),
  p   = ~ 1
)

design <- make_design_list_2(formulas, list(state = "f_tl", input = "f_tk"), data = df)
lookup_phi <- make_process_lookup("phi", design, df, state_var = "f_tl",
                                  full_groups = design$group_factor$phi)
params_phi <- make_param_vectors("phi", design)
sanity_check_process("phi", design, lookup_phi, params_phi, state_var = "f_tl")

}
